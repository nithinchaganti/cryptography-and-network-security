import random

# Define the values of e and n
e = 31
n = 3599

# Function to calculate Euler's totient function of n
def phi(n):
    result = n
    p = 2
    while p * p <= n:
        if n % p == 0:
            while n % p == 0:
                n //= p
            result -= result // p
        p += 1
    if n > 1:
        result -= result // n
    return result

# Calculate phi(n)
phi_n = phi(n)

# Function to calculate the modular multiplicative inverse of a modulo m
def mod_inv(a, m):
    # Extended Euclidean algorithm
    m0 = m
    y = 0
    x = 1
    if m == 1:
        return 0
    while a > 1:
        # q is quotient
        q = a // m
        t = m
        # m is remainder now, process same as
        # euclid's algo
        m = a % m
        a = t
        t = y
        # Update y and x
        y = x - q * y
        x = t
    # Make x positive
    if x < 0:
        x += m0
    return x

# Calculate the modular multiplicative inverse of e modulo phi(n)
d = mod_inv(e, phi_n)

# Print the public key and private key
print("Public key: (e = {}, n = {})".format(e, n))
print("Private key: (d = {})".format(d))
